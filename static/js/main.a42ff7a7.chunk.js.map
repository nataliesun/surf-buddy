{"version":3,"sources":["SurfContext.js","helpers.js","components/SearchDropdown.js","routes/WelcomePage/WelcomePage.js","components/NavBar/NavBar.js","routes/LocationPage/LocationPage.js","App.js","serviceWorker.js","index.js","colors.js"],"names":["SurfContext","React","createContext","spots","key","text","value","locationData","setLocationData","location","countyData","checkStatus","response","ok","Promise","resolve","console","log","reject","Error","statusText","parseJSON","json","SearchDropdown","getLocationData","locationString","split","locationCounty","replace","toLowerCase","urls","concat","all","map","url","fetch","then","catch","error","alert","data","_this","context","props","history","push","_this2","this","react_default","a","createElement","className","Dropdown","icon","placeholder","search","selection","options","onChange","e","_ref","Component","contextType","withRouter","WelcomePage","components_SearchDropdown","NavBar","react_router_dom","to","LocationPage","state","activeIndex","handleClick","titleProps","index","newIndex","setState","getMinAndMaxFt","array","min","size","max","forEach","hour","current","_this$context","labels","h","datasets","label","backgroundColor","colors","med","borderColor","dark","borderWidth","components_NavBar_NavBar","length","es","scales","yAxes","display","ticks","suggestedMin","beginAtZero","fahrenheit","wetsuit","App","forecast","county","res","resJ","spot","spotsArray","contextValue","src_SurfContext","Provider","react_router","exact","path","component","Boolean","window","hostname","match","styleLink","document","rel","href","head","appendChild","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","darkest","light","lightest"],"mappings":"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","file":"static/js/main.a42ff7a7.chunk.js","sourcesContent":["import React from 'react'\n\nconst SurfContext = React.createContext({\n    spots: [\n        {\n            key: \"\",\n            text: \"\",\n            value: \"\"\n        }\n    ],\n    locationData: [],\n    setLocationData: () => {\n\n    },\n    location: '',\n    countyData: []\n})\n\nexport default SurfContext","function checkStatus(response) {\n    if (response.ok) {\n        return Promise.resolve(response);\n    } else {\n        console.log(response)\n        return Promise.reject(new Error(response.statusText));\n    }\n}\n\nfunction parseJSON(response) {\n    return response.json();\n}\n\nexport { checkStatus, parseJSON }","import React, { Component } from 'react';\nimport { withRouter } from \"react-router\";\n\nimport { Dropdown } from 'semantic-ui-react';\nimport SurfContext from '../SurfContext';\n\nimport { checkStatus, parseJSON } from '../helpers';\n\n\nclass SearchDropdown extends Component {\n    static contextType = SurfContext;\n\n    getLocationData = (locationString) => {\n        const location = locationString.split(\",\")[0];\n        const locationCounty = locationString.split(\",\")[1].replace(/\\s+/g, '-').toLowerCase();\n\n        const urls = [\n            `http://api.spitcast.com/api/spot/forecast/${location}/`,\n            `http://api.spitcast.com/api/county/water-temperature/${locationCounty}/`];\n\n        Promise.all(urls.map(url =>\n            fetch(url)\n                .then(checkStatus)\n                .then(parseJSON)\n                .catch(error => {\n                    alert('No data for location, please try another.')\n                    console.log('There was a problem!', error)\n                })\n        ))\n            .then(data => {\n                this.context.setLocationData(data[0], data[1]);\n                this.props.history.push('/forecast')\n            })\n            .catch(error => console.log('There was a problem!', error))\n    }\n\n    render() {\n\n        return (\n            <div className=\"Form\">\n                {/* find out a way to display after info loads */}\n                <Dropdown\n                    icon='search'\n                    placeholder='Spot'\n                    search\n                    selection\n                    options={this.props.spots}\n                    onChange={(e, { value }) => this.getLocationData(value)}\n                />\n\n            </div>\n        );\n    }\n}\n\nexport default withRouter(SearchDropdown);","import React, { Component } from 'react';\nimport SearchDropdown from '../../components/SearchDropdown';\nimport SurfContext from '../../SurfContext';\n\nimport './WelcomePage.css'\n\nclass WelcomePage extends Component {\n    static contextType = SurfContext;\n\n    render() {\n        return (\n            <div className=\"WelcomePage\">\n                <div className=\"content\">\n                    <h2>Wave Buddy</h2>\n                    <SearchDropdown spots={this.context.spots} />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default WelcomePage;","import React, { Component } from 'react';\nimport SearchDropdown from '../SearchDropdown';\nimport SurfContext from '../../SurfContext';\nimport { Link } from 'react-router-dom'\n\nimport './NavBar.css';\n\nclass NavBar extends Component {\n    static contextType = SurfContext;\n    render() {\n        return (\n            <div className=\"NavBar\">\n                <Link to='/'>\n                    <h2>Wave Buddy</h2>\n                </Link>\n                <SearchDropdown spots={this.context.spots} />\n            </div>\n        );\n    }\n}\n\nexport default NavBar;","import React, { Component } from 'react';\n\nimport { colors } from \"../../colors.js\";\n\nimport { Line } from 'react-chartjs-2';\nimport SurfContext from '../../SurfContext.js';\nimport NavBar from '../../components/NavBar/NavBar.js';\n\n\n\n\n\nclass LocationPage extends Component {\n    static contextType = SurfContext;\n\n    state = { activeIndex: -1 }\n\n    handleClick = (e, titleProps) => {\n        const { index } = titleProps\n        const { activeIndex } = this.state\n        const newIndex = activeIndex === index ? -1 : index\n\n        this.setState({ activeIndex: newIndex })\n    }\n\n    getMinAndMaxFt = (array) => {\n        let min = array[0].size;\n        let max = array[0].size;\n        this.context.locationData.forEach(hour => {\n            let current = hour.size;\n\n            if (current < min) {\n                min = current\n            }\n            if (current > max) {\n                max = current\n            }\n        });\n        if (min === max) {\n            return `${min}ft`\n        }\n        return `${min}-${max}ft`;\n    }\n\n\n\n    render() {\n\n        const { locationData, location, countyData } = this.context;\n        const data = {\n            labels: locationData.map(h => h.hour),\n            datasets: [{\n                label: \"Wave height (ft)\",\n                backgroundColor: colors.med,\n                borderColor: colors.dark,\n                data: locationData.map(h => h.size),\n                borderWidth: 2\n            }]\n        }\n        const options = {\n            scales: {\n                yAxes: [{\n                    display: true,\n                    ticks: {\n                        suggestedMin: 0,    // minimum will be 0, unless there is a lower value.\n                        // OR //\n                        beginAtZero: true,\n                        max: 7  // minimum value will be 0.\n                    }\n                }]\n            }\n        }\n\n        return (\n            <section className=\"forecast-display\">\n                <NavBar />\n\n                {/* {this.state.error && <div className=\"error\">{this.state.error}</div>} */}\n                {this.context.locationData.length === 0 && (\n                    <h3>Select a location from the search box</h3>\n                )}\n                {this.context.locationData.length > 0 && (\n                    <div className=\"ui vertical stripe segment\">\n                        <div className=\"ui text container\">\n                            <h2>{location}</h2>\n                            <Line data={data} options={options} />\n                        </div>\n                        <div className=\"ui header\">\n                            <h3>Wave height: {this.getMinAndMaxFt(locationData)}</h3>\n                            <div className=\"temp\">\n                                <p>Water temp: {countyData.fahrenheit}°F</p>\n                                <p>\n                                    Recommended: {countyData.wetsuit}\n                                </p>\n\n\n                            </div>\n\n                        </div>\n                    </div>\n                )}\n            </section>\n        );\n    }\n}\n\nexport default LocationPage;","import React from 'react';\nimport { Route } from 'react-router-dom';\n\nimport WelcomePage from './routes/WelcomePage/WelcomePage';\nimport LocationPage from './routes/LocationPage/LocationPage';\n\nimport './App.css';\n\nimport SurfContext from './SurfContext';\n\nclass App extends React.Component {\n  state = {\n    spots: [\n      {\n        key: \"\",\n        text: \"\",\n        value: \"\"\n      }\n    ],\n    locationData: [],\n    location: \"\",\n    countyData: {},\n    error: null,\n  }\n\n  setLocationData = (forecast, county) => {\n\n    this.setState({\n      locationData: forecast,\n      location: forecast[0][\"spot_name\"],\n      countyData: county\n    })\n  }\n\n  componentDidMount() {\n    const allspots = \"http://api.spitcast.com/api/spot/all\"\n\n    fetch(allspots)\n      .then(res => res.json())\n      .then(resJ => resJ.map(spot => {\n        return {\n          key: spot[\"spot_id\"],\n          text: spot[\"spot_name\"],\n          value: `${spot[\"spot_id\"]},${spot[\"county_name\"]}`\n        }\n      }))\n      .then(spotsArray => this.setState({\n        spots: spotsArray\n      }))\n  }\n\n\n  render() {\n    const contextValue = {\n      spots: this.state.spots,\n      location: this.state.location,\n      locationData: this.state.locationData,\n      countyData: this.state.countyData,\n      setLocationData: this.setLocationData\n    }\n    return (\n      <SurfContext.Provider value={contextValue}>\n        <div className=\"App\">\n          <Route exact path=\"/\" component={WelcomePage} />\n          <Route exact path=\"/forecast\" component={LocationPage} />\n        </div>\n      </SurfContext.Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst styleLink = document.createElement(\"link\");\nstyleLink.rel = \"stylesheet\";\nstyleLink.href = \"https://cdn.jsdelivr.net/npm/semantic-ui/dist/semantic.min.css\";\ndocument.head.appendChild(styleLink);\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const colors = {\n    \"darkest\": \"rgba(0,28,72, .4)\",\n    \"dark\": \"rgba(0,70,129, .4)\",\n    \"med\": \"rgba(0,138,189, .4)\",\n    \"light\": \"rgba(151,203,220, .4)\",\n    \"lightest\": \"rgb(221,232,240)\"\n}\n\nmodule.exports = { colors }"],"sourceRoot":""}